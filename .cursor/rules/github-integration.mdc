---
description: "GitHub API 集成和自动化规则（重构后模块化架构）"
globs: *.py
---

# GitHub 集成规范

## 环境变量配置

项目依赖以下环境变量：

- `GITHUB_REPOSITORY` - GitHub 仓库全名（格式：owner/repo）
- `GITHUB_TOKEN` - GitHub 个人访问令牌，用于 API 认证

## 配置管理

使用 `src/core/config.py` 统一管理配置：

```python
from src.core.config import config

# 获取配置信息
repo = config.github_repository  # 自动解析环境变量
token = config.github_token
user_name = config.user_name     # 自动解析用户名
blog_name = config.blog_name     # 自动解析仓库名
```

## GitHub 客户端（单例模式）

使用 `src/core/github_client.py` 封装的 GitHub 客户端：

```python
from src.core.github_client import github_client

# 获取 GitHub 用户和仓库对象
user = github_client.user
blog_repo = github_client.blog_repo

# 检查速率限制
github_client.check_rate_limit()

# 安全关闭连接
github_client.close()
```

### 核心功能

- **单例模式**：确保全局唯一的 GitHub 客户端实例
- **自动认证**：使用配置中的 token 自动登录
- **速率限制检查**：自动检查并等待 API 限制重置
- **连接管理**：提供安全的连接关闭方法

## Issues 和 Labels 处理

### 获取数据

```python
# 获取所有 labels
labels = blog_repo.get_labels()

# 获取特定 label 的所有 issues
issues_in_label = blog_repo.get_issues(labels=(label,), state="all")

# 遍历 issues（使用生成器避免内存问题）
for issue in issues_in_label:
    # 处理单个 issue
    article = Article.from_issue(issue)
    articles.append(article)
```

### 数据模型

使用 `src/models/article.py` 中的 Article 类：

```python
from src.models.article import Article

# 从 GitHub Issue 创建 Article 对象
article = Article.from_issue(issue)

# 访问文章属性
title = article.title
url = article.url
date = article.created_at
content = article.content
```

## 错误处理和恢复

### 速率限制处理

```python
# 自动检查速率限制
github_client.check_rate_limit()

# 手动等待限制重置
import time
time.sleep(60)  # 等待 1 分钟
```

### 异常处理

```python
try:
    issues = blog_repo.get_issues(state="all")
    for issue in issues:
        # 处理单个 issue
        pass
except Exception as e:
    logger.error(f"获取 issues 失败: {e}")
    # 继续处理其他数据
```

## 自动化流程

1. **初始化**：BlogGenerator 初始化 GitHub 客户端
2. **数据获取**：批量获取 labels 和 issues
3. **数据处理**：转换为 Article 对象
4. **内容生成**：使用生成器创建 HTML 和 README
5. **文件保存**：保存到本地文件系统
6. **资源清理**：安全关闭 GitHub 连接
7. **部署触发**：通过 Git 提交触发 GitHub Pages 部署

## 性能优化

- **批量处理**：一次性获取所有数据，减少 API 调用
- **缓存机制**：词云生成器使用缓存数据避免重复请求
- **连接复用**：单例模式确保连接复用
- **错误恢复**：单个操作失败不影响整体流程

## 运行方式

**重要**：必须使用 uv 运行脚本：

```bash
# 运行主程序
uv run python main.py

# 或直接运行模块
uv run python src/main.py
```

## 注意事项

- 环境变量必须在运行前正确设置
- GitHub token 需要有仓库的读取权限
- 注意 API 速率限制，避免频繁调用
- 使用日志记录便于调试和监控