---
description: "Jekyll 博客结构和内容管理规范"
globs: *.md,*.yml,*.html
---

# Jekyll 博客结构规范

## Jekyll 配置

### _config.yml 配置

```yaml
theme: minima
markdown: GFM
```

- 使用 `minima` 主题提供简洁的博客样式
- 启用 GitHub Flavored Markdown 支持
- 支持数学公式、表格、任务列表等扩展语法

## 内容管理

### Issues 作为文章管理

- 所有博客文章以 GitHub Issues 形式创建
- 使用 Labels 对文章进行分类（如：ACG、tips、apps、docker）
- Issue 标题作为文章标题
- Issue 内容作为文章正文

### 分类系统

当前支持的分类标签：
- `ACG` - 游戏和动漫相关内容
- `tips` - 技术技巧和教程
- `apps` - 软件应用推荐
- `docker` - Docker 相关技术

### 图片资源管理

- 图片按文章标题存储在 `assets/images/` 目录下
- 每篇文章创建独立的子目录（基于文章标题）
- 支持多种图片格式：`.jpg`, `.png`, `.gif`, `.webp`, `.svg`
- GitHub 附件图片自动下载到本地
- 词云图片存储为 `assets/wordcloud-light.png` 和 `assets/wordcloud-dark.png`

### 文章备份管理

- 文章备份到 `articles_backup/` 目录
- 备份格式为 Markdown 文件
- 文件命名格式：`YYYY-MM-DD-标题.md`
- 包含文章内容和评论
- 每次运行自动更新备份

### HTML 网站生成

- 完整 HTML 网站生成到 `html/` 目录
- 包含首页、文章页和静态资源
- 文章按分类组织在 `html/articles/{label}/` 目录
- 所有图片和静态资源复制到 `html/assets/` 目录
- 可独立部署的完整网站

## README.md 自动生成

### 结构组成

1. **统计信息区域** - 显示 issues 数量、最后提交时间、fork/star 数量
2. **词云展示** - 点击可跳转到博客首页
3. **分类文章列表** - 按 label 分组展示，支持折叠展开

### 格式规范

```markdown
<p align='center'>
    <img src="https://badgen.net/github/issues/{user}/{repo}"/>
    <img src="https://badgen.net/badge/last-commit/{timestamp}"/>
    <img src="https://badgen.net/github/forks/{user}/{repo}"/>
    <img src="https://badgen.net/github/stars/{user}/{repo}"/>
    <img src="https://badgen.net/github/watchers/{user}/{repo}"/>
</p>

<summary>
    <a href="https://{user}.github.io/{repo}/">
        <img src="assets/wordcloud.png" title="词云" alt="词云">
    </a>
</summary>

<details open>
<summary>{label_name}	[{count}篇]</summary>

{issue_list}

</details>
```

## 部署和更新

- GitHub Pages 自动部署 `main` 分支
- Python 脚本自动更新 README.md 和生成 HTML 网站
- 支持实时预览和版本控制
- 通过 Git 提交触发自动部署
- 支持通过 GitHub Actions 自动备份文章

## GitHub Actions 工作流

### backup-articles.yml

手动触发的文章备份工作流：

```yaml
name: Backup Articles
on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Commit message (optional)'
```

工作流功能：
1. 使用 uv 安装 Python 依赖
2. 运行备份脚本
3. 自动提交并推送更改
4. 支持自定义提交消息
5. 包含重试机制确保推送成功